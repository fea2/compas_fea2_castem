from datetime import datetime

import compas_fea2
from compas_fea2.job import InputFile
from compas_fea2.job import ParametersFile

import compas_fea2_castem


class CastemInputFile(InputFile):
    """Input file object for standard analysis.

    Parameters
    ----------
    problem : obj
        Problem object.

    Attributes
    ----------
    name : str
        Input file name.
    job_name : str
        Name of the Castem job. This is the same as the input file name.
    data : str
        Final input file text data that will be written in the .dgibi file.
    """

    def __init__(self, **kwargs):
        super(CastemInputFile, self).__init__(**kwargs)
        self._extension = "dgibi"

    def jobdata(self):
        """Generate the content of the input fileself from the Problem object.

        Parameters
        ----------
        problem : obj
            Problem object.

        Return
        ------
        str
            content of the input file
        """
        now = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
        return f"""*** ------------------------
*** {self.problem.model.name}
*** ------------------------
***
*** {self.problem.model.description}
***
***
*** Author: {self.model.author}
*** Description: {self.model.description}
*** Date: {now}
*** Generated by:
***   compas_fea2 v{compas_fea2.__version__}
***   compas_fea2_castem v{compas_fea2_castem.__version__}
***
***------------------------------------------------------------------
***------------------------------------------------------------------
*** MODEL
***------------------------------------------------------------------
***------------------------------------------------------------------
***
{self.problem.model.jobdata()}
***
***
*** -----------------------------------------------------------------
*** -----------------------------------------------------------------
*** PROBLEM
*** -----------------------------------------------------------------
*** -----------------------------------------------------------------
***
{self.problem.jobdata()}
FIN;
"""


class CastemParametersFile(ParametersFile):
    """"""

    def __init__(self, name=None, **kwargs):
        super(CastemParametersFile, self).__init__(name, **kwargs)
        self._extension = "par"
        raise NotImplementedError
